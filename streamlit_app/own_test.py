import streamlit as st
from PIL import Image, ImageOps
import tensorflow as tf
import keras
import os
import numpy as np
import pandas as pd
import time
import cv2
os.environ["KERAS_BACKEND"] = "tensorflow"

from custom_functions import make_gradcam_heatmap, save_and_display_gradcam
from keras.layers import Conv2D
from tensorflow.keras.preprocessing.image import img_to_array, array_to_img
from keras.models import load_model

#modele pr√©diction COVID
model_densenet = tf.keras.models.load_model(r"C:\Users\kiri_\Downloads\DenseNet201_finetuned_0_95_20epochs.h5")
model_vgg = tf.keras.models.load_model(r"C:\Users\kiri_\Downloads\VGG16_finetuned.h5")
#mod√®le de tri
model_tri = tf.keras.models.load_model(r"C:\Users\kiri_\Downloads\filtermodel.h5")
model = None

def show_test():

    # Style des onglets
    st.markdown("""
        <style>
            .stTabs [data-baseweb="tab-list"] {
                display: flex;
                gap: 10px;
            }

            .stTabs [data-baseweb="tab"] {
                padding: 10px 15px;
                border: 1px solid transparent;
                border-radius: 5px 5px 0 0;
                background-color: transparent;
                cursor: pointer;
                transition: all 0.3s ease;
            }

            .stTabs [data-baseweb="tab"]:hover {
                background-color: #8f8d9b;
            }

            .stTabs [aria-selected="true"] {
                background-color:  #57546a;
                border-color: #ccc;
                border-bottom-color: transparent;
            }
        </style>""", unsafe_allow_html = True)

    tab1, tab2, tab3 = st.tabs(["üëÄ Analyse de la GRAD-CAM", "üöÄ R√©aliser des pr√©dictions", "‚öñÔ∏è Qualit√©s et limites"])

    with tab1:
        st.header("Analyse de la GRAD-CAM")

        col1, col2 = st.columns([0.6, 0.4])

        with col1:
            st.markdown('''
            Le GRAD-CAM est une technique de visualisation : elle est utile pour comprendre quelles parties d'une image donn√©e ont conduit un r√©seau de neurones convolutifs √† sa d√©cision finale de classification.

            Elle est utile pour d√©boguer le processus de d√©cision d'un algorithme, en particulier dans le cas d'une erreur de classification.

            Cette technique provient d'une cat√©gorie plus g√©n√©rale de proc√©d√©s appel√©e visualisation de __Class Activation Map__ (CAM).

            Elle consiste √† produire des heatmaps repr√©sentant les classes d'activation sur les images d'entr√©e. Une __class activation heatmap__ est associ√©e √† une classe de sortie sp√©cifique.

            Ces classes sont calcul√©es pour chaque pixel d'une image d'entr√©e, indiquant l'importance de chaque pixel par rapport √† la classe consid√©r√©e.

            Par exemple, si une image est utilis√©e dans un convnet chiens/chats, la visualisation CAM permet de g√©n√©rer une carte thermique pour la classe ¬´ chat ¬ª, indiquant √† quel point les diff√©rentes parties de l'image ressemblent √† un chat, et √©galement une carte thermique pour la classe ¬´ chien ¬ª, indiquant √† quel point les parties de l'image ressemblent √† un chien.
                        ''')

        with col2:
            gradcam = Image.open('images\illustration_gradcam.jpeg')
            st.image(gradcam, use_column_width = True, caption = "Illustration de la feature-map sur une image de chien")

    with tab2:
        st.header("R√©aliser des pr√©dictions")
        # Configuration initiale de l'√©tat de session
        if 'model_selected' not in st.session_state:
            st.session_state.model_selected = None
        if 'model_loaded' not in st.session_state:
            st.session_state.model_loaded = None

        col1, col2, col3 = st.columns([0.3, 0.4, 0.3])

        with col1:
            st.session_state.model_selected = st.selectbox(
                "Quel mod√®le utiliser ?",
                ("DenseNet201", "VGG16"),
                index=None,
                placeholder="Choisissez un mod√®le..."
            )
            if st.session_state.model_selected == "DenseNet201":
                st.write("Mod√®le le plus performant, mais aussi le plus lourd.")
                st.session_state.model_loaded = 'DenseNet201'
            elif st.session_state.model_selected == "VGG16":
                st.write("Mod√®le le plus √©quilibr√©.")
                st.session_state.model_loaded = 'VGG16'

        with col2:
            if st.session_state.model_selected == "DenseNet201" and st.session_state.model_loaded == 'DenseNet201':
                with st.spinner('Chargement du mod√®le DenseNet201...'):
                    model = model_densenet
                    st.success('üëè Mod√®le DenseNet201 charg√© et pr√™t √† pr√©dire !')
            elif st.session_state.model_selected == "VGG16" and st.session_state.model_loaded == 'VGG16':
                with st.spinner('Chargement du mod√®le VGG16...'):
                    model = model_vgg
                    st.success('üëè Mod√®le VGG16 charg√© et pr√™t √† pr√©dire !')

        with col3:
            if st.button('R√©initialiser le mod√®le', type = 'primary'):
                keys_to_delete = ['model_selected', 'model_loaded', 'file_uploaded']
                for key in keys_to_delete:
                    if key in st.session_state:
                        del st.session_state[key]
                        st.experimental_rerun()

        st.header("", divider = 'gray')

        col1, col2 = st.columns([0.6, 0.4])

        with col1:
            file_container = st.empty()
            uploaded_file = file_container.file_uploader("", type=['png', 'jpg', 'jpeg'])

        if uploaded_file and st.session_state.model_selected is not None:
            with col2:
                st.write('')
                st.write('')
                #original = Image.open(uploaded_file)
                bar_progress = 0
                my_bar = st.progress(bar_progress, text = "Ouverture de l'image...")
                time.sleep(0.5)
                bar_progress = 10
                my_bar.progress(bar_progress, text = "R√©alisation du preprocessing...")
        
        if (uploaded_file is not None) and (st.session_state.model_selected is not None):

            file_bytes = np.asarray(bytearray(uploaded_file.read()), dtype=np.uint8)
            image = cv2.imdecode(file_bytes, cv2.IMREAD_COLOR)
            resized_image = cv2.resize(image, (224, 224))
            resized_image = resized_image/255
            to_predict = np.expand_dims(resized_image, axis=0)
            tri_image = model_tri.predict(to_predict)

            if tri_image <= 0.5:



                # Ouvrir l'image t√©l√©charg√©e
                original = Image.open(uploaded_file)        

                # Image trait√©e
                gray_image = original.convert('L')
                channelized = gray_image.convert("RGB")
                resized = channelized.resize((224, 224))
                img_normalized = np.array(resized) / 255.0  # Convertir l'image en array et normaliser entre 0 et 1
                img_normalized -= np.array([0.485, 0.456, 0.406])  # Soustraction de la moyenne par canal
                img_normalized /= np.array([0.229, 0.224, 0.225])  # Division par l'√©cart-type par canal
                img_normalized = img_normalized.reshape(-1, 224, 224, 3)  # Remodeler pour correspondre aux attentes du mod√®le (batch_size, height, width, channels
                
                bar_progress = 30
                my_bar.progress(bar_progress, text = "Estimation des pr√©dictions...")
                time.sleep(0.5)
                predictions = model.predict(img_normalized)
                bar_progress = 70
                my_bar.progress(bar_progress, text = "G√©n√©ration de la GRAD-CAM...")
                time.sleep(0.5)
                    
                col1, col2, col3 = st.columns([0.3, 0.4, 0.3])

                def normalize_display_image(img_normalized):
                    img_display = (img_normalized * np.array([0.229, 0.224, 0.225])) + np.array([0.485, 0.456, 0.406])
                    img_display = np.clip(img_display, 0, 1)
                    img_display = (img_display * 255).astype(np.uint8)
                    return img_display

                if original.width > 500:
                    width = 500
                else:
                    width = original.width

                with col1:
                    st.subheader("Image originale")
                    st.image(original, use_column_width = False, width = width, clamp = True)
                    st.warning("Image redimensionn√©e pour des raisons d'affichage.", icon = "‚ö†Ô∏è") if original.width > 500 else None

                with col2:
                    st.subheader("Image trait√©e")
                    st.image(img_normalized, use_column_width = False, clamp = True)

                with col3:
                    st.subheader("GRAD-CAM")
                    # Pr√©paration de l'image pour GRAD-CAM sans dimension de batch
                    heatm_img = np.squeeze(img_normalized)

                    last_conv_layer_name = None
                    for layer in reversed(model.layers):
                        if isinstance(layer, keras.layers.Conv2D):  # Assure-toi que c'est bien keras.layers.Conv2D
                            last_conv_layer_name = layer.name
                            break

                    # G√©n√©rer la heatmap √† partir du mod√®le et de l'image trait√©e
                    heatmap = make_gradcam_heatmap(np.expand_dims(heatm_img, axis = 0), model, last_conv_layer_name)

                    # Pr√©paration de l'image pour l'affichage de la superposition GRAD-CAM
                    img_display = normalize_display_image(heatm_img)  # Convertir l'image normalis√©e en image affichable
                    grad_img = save_and_display_gradcam(img_display, heatmap)  # Utilise l'image affichable ici
                    bar_progress = 100
                    my_bar.progress(bar_progress, text = "Ex√©cution termin√©e")
                    time.sleep(0.5)
                    st.image(grad_img, use_column_width=False, clamp=True)
                
                class_names = {0 : 'COVID',
                            1 : 'Lung_Opacity',
                            2 : 'Normal',
                            3 : 'Viral Pneumonia'}
                df_predictions = pd.DataFrame(predictions)
                df_predictions = df_predictions.rename(columns = class_names)
                df_predictions_sorted = df_predictions.sort_values(by = 0, axis = 1, ascending = False)
                df_transposed = df_predictions_sorted.T
                table_html = df_transposed.to_html(header = False, index = True)

                classe_predite_indice = np.argmax(predictions)
                nom_classe_predite = class_names[classe_predite_indice]
                probabilite_predite = np.max(predictions)
                probabilite_predite = "{:.4f}".format(probabilite_predite)

                col1, col2, col3 = st.columns([0.3, 0.3, 0.4])

                with col1:
                    # Afficher la classe pr√©dite et sa probabilit√©
                    st.markdown("Tableau des probabilit√©s estim√©es :")
                    st.write(table_html, unsafe_allow_html = True)
                
                with col2:
                    st.markdown(
                        f"""
                        <div style='border-radius: 5px; border: 2px solid #d6d6d6; padding: 10px; max-width: 400px; background-color: rgba(255, 255, 255, 0.2);'>
                            <div style='display: flex; justify-content: space-around;'>
                                <div>
                                    <p style='font-size: 20px; text-align: center; margin: 0;'>Classe pr√©dite</p>
                                    <p style='font-size: 30px; text-align: center; margin: 0;'>{nom_classe_predite}</p>
                                </div>
                            </div>
                        </div>
                        """,
                        unsafe_allow_html=True
                    )
                    st.write("")
                    percent_predit = float(probabilite_predite) * 100
                    st.markdown(
                        f"""
                        <div style='border-radius: 5px; border: 2px solid #d6d6d6; padding: 10px; max-width: 400px; background-color: rgba(255, 255, 255, 0.2);'>
                            <div style='display: flex; justify-content: space-around;'>
                                <div>
                                    <p style='font-size: 20px; text-align: center; margin: 0;'>Confiance de la pr√©diction</p>
                                    <p style='font-size: 30px; text-align: center; margin: 0;'>{percent_predit} %</p>
                                </div>
                            </div>
                        </div>
                        """,
                        unsafe_allow_html=True
                    )

                with col3:
                    if float(probabilite_predite) > 0.90:
                        st.markdown(f"Avec une probabilit√© de {probabilite_predite}, il est **certain** que cette radiographie illustre un cas {nom_classe_predite}. Attention cependant, cette pr√©diction est √† prendre en compte seulement si l'image s'agit bien d'une radiographie conforme.")
                    elif float(probabilite_predite) > 0.75:
                        st.markdown(f"Avec une probabilit√© de {probabilite_predite}, il est **probable** que cette radiographie illustre un cas {nom_classe_predite}. Attention cependant, cette pr√©diction est √† prendre en compte seulement si l'image s'agit bien d'une radiographie conforme.")
                    elif float(probabilite_predite) > 0.5:
                        st.markdown(f"Avec une probabilit√© de {probabilite_predite}, il est **possible** que cette radiographie illustre un cas {nom_classe_predite}. Attention cependant, cette pr√©diction est √† prendre en compte seulement si l'image s'agit bien d'une radiographie conforme.")
                    elif float(probabilite_predite) <= 0.5:
                        st.markdown(f"Avec une probabilit√© de {probabilite_predite}, il **n'est pas prudent de dire** que cette radiographie illustre un cas {nom_classe_predite}. Il est possible que l'image ne soit pas adapt√©e au mod√®le.")

            else:  
                st.warning("L'image fournie ne semble pas √™tre une radiographie")
                st.image(uploaded_file, caption = "Image fournie")

        else:
            # Message affich√© tant qu'aucune image n'est t√©l√©charg√©e
            st.warning("Veuillez t√©l√©charger une image pour commencer l'analyse.", icon = "‚ö†Ô∏è")

    with tab3:
        st.header("R√©sum√© des mod√®les")

        col1, col2 = st.columns([0.5, 0.5])

        with col1:
            st.subheader("Avantages")
            st.markdown('''
                ‚úîÔ∏è Performances de pr√©dictions √©quilibr√©es et satisfaisantes pour les diff√©rentes classes.

                ‚úîÔ∏è Mod√®le r√©actif et l√©ger √† mettre en place, applicable √† toutes les radiographies pulmonaires standards.

                ‚úîÔ∏è Sensibilit√© et sp√©cificit√© √©lev√©es, en particulier pour les classes COVID (0.96) et Normal (0.91).

                ‚úîÔ∏è Equilibre contr√¥l√© dans l'entrainement du mod√®le, r√©duisant le risque de data drift.
                        ''')

        with col2:
            st.subheader("Inconv√©nients")
            st.markdown('''
                ‚ùå Bien qu'efficace, les mod√®les peuvent encore √™tre optimis√©s en visant la qualit√© des images et la s√©lection des jeux d'entrainement.

                ‚ùå Les GRADCAM montrent encore des features "non pertinentes" pour certaines images avec de nombreux artefacts.

                ‚ùå Bien que les m√©triques utilis√©s pour s√©lectionner les mod√®les soient compl√©mentaires et pertinentes, personnaliser des m√©triques de perte permettraient d'am√©liorer d'autant plus les performances du mod√®le.

                ‚ùå Le mod√®le ne fait pasl a diff√©rence entre une radiographie et un autre type d'image.
                        ''')